.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_frank_wolfe_plot_fw_stepsize.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_frank_wolfe_plot_fw_stepsize.py:


Comparison of different step-sizes in Frank-Wolfe
=================================================

Speed of convergence of different step-size strategies
and on 4 different classification datasets.



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/frank_wolfe/images/sphx_glr_plot_fw_stepsize_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/frank_wolfe/images/sphx_glr_plot_fw_stepsize_002.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/frank_wolfe/images/sphx_glr_plot_fw_stepsize_003.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/frank_wolfe/images/sphx_glr_plot_fw_stepsize_004.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running on the Gisette dataset
    /usr/local/google/home/pedregosa/anaconda3/lib/python3.6/site-packages/matplotlib/figure.py:448: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())
    Running on the RCV1 dataset
    Running on the Madelon dataset
    Running on the Covtype dataset





|


.. code-block:: default

    import copt as cp
    import matplotlib.pylab as plt
    import numpy as np

    # .. datasets and their loading functions ..
    datasets = [
        ("Gisette", cp.datasets.load_gisette),
        ("RCV1", cp.datasets.load_rcv1),
        ("Madelon", cp.datasets.load_madelon),
        ("Covtype", cp.datasets.load_covtype)
        ]

    variants_fw = [
        ["adaptive", "adaptive step-size"],
        ["adaptive2", "adaptive2 step-size"],
        ["adaptive3", "adaptive3 step-size"],
        [None, "Lipschitz step-size"]]

    for dataset_title, load_data in datasets:
      print("Running on the %s dataset" % dataset_title)

      X, y = load_data()
      n_samples, n_features = X.shape

      # the size of the constraint set. We set it to
      # (for example) n_features / 2
      l1_ball = cp.utils.L1Ball(n_features / 2.)
      f = cp.utils.LogLoss(X, y)
      x0 = np.zeros(n_features)

      fw_trace = {label: [] for _, label in variants_fw}
      for step_size, label in variants_fw:

        def trace(kw):
          # store the Frank-Wolfe gap g_t
          fw_trace[label].append(kw["g_t"])

        cp.minimize_frank_wolfe(
            f.f_grad,
            x0,
            l1_ball.lmo,
            callback=trace,
            step_size=step_size,
            lipschitz=f.lipschitz,
        )

      plt.figure()
      for _, label in variants_fw:
        plt.plot(fw_trace[label], label=label)
      plt.yscale("log")
      plt.legend()
      plt.xlabel("number of iterations")
      plt.ylabel("FW gap")
      plt.title(dataset_title)
      plt.tight_layout()  # otherwise the right y-label is slightly clipped
      plt.grid()
      plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 13 minutes  48.669 seconds)

**Estimated memory usage:**  1600 MB


.. _sphx_glr_download_auto_examples_frank_wolfe_plot_fw_stepsize.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_fw_stepsize.py <plot_fw_stepsize.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_fw_stepsize.ipynb <plot_fw_stepsize.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
