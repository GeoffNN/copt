.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_jax_copt.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_jax_copt.py:


Combining COPT with JAX
=======================

This example shows how JAX can be used within COPT
to compute the gradients of the objective function.
In this example tensorflow-datasets is used to provide
the training data.



.. image:: /auto_examples/images/sphx_glr_plot_jax_copt_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/google/home/pedregosa/anaconda3/lib/python3.6/site-packages/jax/lib/xla_bridge.py:114: UserWarning: No GPU/TPU found, falling back to CPU.
      warnings.warn('No GPU/TPU found, falling back to CPU.')
      0%|          | 0/500 [00:00<?, ?it/s]    PGD:   0%|          | 0/500 [00:00<?, ?it/s]    PGD:   0%|          | 0/500 [00:00<?, ?it/s, iter=0, step_size=0.00031, tol=865]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=0, step_size=0.00031, tol=865]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=0, step_size=0.00031, tol=865]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=1, step_size=0.000341, tol=312]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=1, step_size=0.000341, tol=312]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=2, step_size=0.000375, tol=180]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=2, step_size=0.000375, tol=180]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=3, step_size=0.000413, tol=110]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=3, step_size=0.000413, tol=110]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=4, step_size=0.000454, tol=67.5]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=4, step_size=0.000454, tol=67.5]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=5, step_size=0.0005, tol=41.2]      PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=5, step_size=0.0005, tol=41.2]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=6, step_size=0.00055, tol=24.6]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=6, step_size=0.00055, tol=24.6]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=7, step_size=0.000605, tol=14.2]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=7, step_size=0.000605, tol=14.2]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=8, step_size=0.000665, tol=7.84]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=8, step_size=0.000665, tol=7.84]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=9, step_size=0.000439, tol=4.94]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=9, step_size=0.000439, tol=4.94]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=10, step_size=0.000483, tol=3.06]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=10, step_size=0.000483, tol=3.06]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=11, step_size=0.000531, tol=2.12]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=11, step_size=0.000531, tol=2.12]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=12, step_size=0.000351, tol=1.79]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=12, step_size=0.000351, tol=1.79]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=13, step_size=0.000386, tol=0.922]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=13, step_size=0.000386, tol=0.922]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=14, step_size=0.000424, tol=0.594]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=14, step_size=0.000424, tol=0.594]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=15, step_size=0.000467, tol=0.407]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=15, step_size=0.000467, tol=0.407]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=16, step_size=0.000513, tol=0.277]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=16, step_size=0.000513, tol=0.277]    PGD:   0%|          | 1/500 [00:00<01:06,  7.46it/s, iter=17, step_size=4.39e-5, tol=0.208]     PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=17, step_size=4.39e-5, tol=0.208]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=17, step_size=4.39e-5, tol=0.208]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=18, step_size=6.26e-6, tol=0.195]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=18, step_size=6.26e-6, tol=0.195]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=19, step_size=2.48e-6, tol=0.194]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=19, step_size=2.48e-6, tol=0.194]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=20, step_size=9.82e-7, tol=0.192]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=20, step_size=9.82e-7, tol=0.192]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=21, step_size=2.33e-7, tol=0.198]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=21, step_size=2.33e-7, tol=0.198]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=22, step_size=1.99e-8, tol=0.11]     PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=22, step_size=1.99e-8, tol=0.11]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=23, step_size=2.19e-8, tol=0.1]     PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=23, step_size=2.19e-8, tol=0.1]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=24, step_size=2.41e-8, tol=0.0992]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=24, step_size=2.41e-8, tol=0.0992]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=25, step_size=1.59e-8, tol=0.0892]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=25, step_size=1.59e-8, tol=0.0892]    PGD:   4%|3         | 18/500 [00:00<00:46, 10.43it/s, iter=26, step_size=1.75e-8, tol=0.0811]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=26, step_size=1.75e-8, tol=0.0811]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=26, step_size=1.75e-8, tol=0.0811]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=27, step_size=1.93e-8, tol=0.0776]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=27, step_size=1.93e-8, tol=0.0776]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=28, step_size=2.12e-8, tol=0.103]     PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=28, step_size=2.12e-8, tol=0.103]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=29, step_size=1.4e-8, tol=0.0767]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=29, step_size=1.4e-8, tol=0.0767]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=30, step_size=1.54e-8, tol=0.0697]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=30, step_size=1.54e-8, tol=0.0697]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=31, step_size=1.69e-8, tol=0.0634]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=31, step_size=1.69e-8, tol=0.0634]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=32, step_size=1.86e-8, tol=0.0763]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=32, step_size=1.86e-8, tol=0.0763]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=33, step_size=2.05e-8, tol=0.0893]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=33, step_size=2.05e-8, tol=0.0893]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=34, step_size=1.35e-8, tol=0.0785]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=34, step_size=1.35e-8, tol=0.0785]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=35, step_size=1.49e-8, tol=0.0714]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=35, step_size=1.49e-8, tol=0.0714]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=36, step_size=5.89e-9, tol=0.0407]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=36, step_size=5.89e-9, tol=0.0407]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=37, step_size=6.48e-9, tol=0.037]     PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=37, step_size=6.48e-9, tol=0.037]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=38, step_size=2.57e-9, tol=0.0227]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=38, step_size=2.57e-9, tol=0.0227]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=39, step_size=2.82e-9, tol=0.0206]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=39, step_size=2.82e-9, tol=0.0206]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=40, step_size=3.1e-9, tol=0.0187]     PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=40, step_size=3.1e-9, tol=0.0187]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=41, step_size=3.42e-9, tol=0.017]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=41, step_size=3.42e-9, tol=0.017]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=42, step_size=3.76e-9, tol=0.0155]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=42, step_size=3.76e-9, tol=0.0155]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=43, step_size=4.13e-9, tol=0.0141]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=43, step_size=4.13e-9, tol=0.0141]    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=44, step_size=1.64e-9, tol=0]                                                                                                 Achieved relative tolerance at iteration 44
    PGD:   5%|5         | 27/500 [00:00<00:33, 14.19it/s, iter=44, step_size=1.64e-9, tol=0]
    /usr/local/google/home/pedregosa/anaconda3/lib/python3.6/site-packages/matplotlib/figure.py:448: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())





|


.. code-block:: default

    import copt as cp
    from jax import grad
    from jax import numpy as np
    from jax import random
    import numpy as onp
    import pylab as plt

    # .. construct (random) dataset ..
    n_samples, n_features = 1000, 200
    key = random.PRNGKey(1)
    X = random.normal(key, (n_samples, n_features))
    key, subkey = random.split(key)
    y = random.normal(key, (n_samples,))


    def loss(w):
      # squared error loss
      z = X.dot(w) - y
      return np.sum(z * z)


    def f_grad(w):
      return loss(w), grad(loss)(w)

    w0 = onp.zeros(n_features)

    l1_ball = cp.utils.L1Ball(n_features / 2.)
    cb = cp.utils.Trace(lambda x: loss(x) + l1_ball(x))
    cp.minimize_proximal_gradient(
        f_grad,
        w0,
        prox=l1_ball.prox,
        verbose=True,
        callback=cb
    )
    plt.plot(cb.trace_fx)
    plt.xlabel('# Iterations')
    plt.ylabel('Objective value')
    plt.grid()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.400 seconds)

**Estimated memory usage:**  72 MB


.. _sphx_glr_download_auto_examples_plot_jax_copt.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_jax_copt.py <plot_jax_copt.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_jax_copt.ipynb <plot_jax_copt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
