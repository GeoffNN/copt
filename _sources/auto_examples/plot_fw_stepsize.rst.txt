.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_fw_stepsize.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_fw_stepsize.py:


Comparison of different step-sizes in Frank-Wolfe
=================================================

Speed of convergence of different step-size strategies
and on 4 different classification datasets.




.. image:: /auto_examples/images/sphx_glr_plot_fw_stepsize_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running on the Gisette dataset
    Running adaptive step-size variant
    Running adaptive2 step-size variant
    Running adaptive3 step-size variant
    Running Lipschitz step-size variant
    Running on the RCV1 dataset
    Running adaptive step-size variant
    Running adaptive2 step-size variant
    Running adaptive3 step-size variant
    Running Lipschitz step-size variant
    Running on the Madelon dataset
    Running adaptive step-size variant
    Running adaptive2 step-size variant
    Running adaptive3 step-size variant
    Running Lipschitz step-size variant
    Running on the Covtype dataset
    Running adaptive step-size variant
    Running adaptive2 step-size variant
    Running adaptive3 step-size variant
    Running Lipschitz step-size variant




|


.. code-block:: python

    import copt as cp
    import matplotlib.pylab as plt
    import numpy as np

    # datasets and their respective loading functions
    datasets = [
        ("Gisette", cp.datasets.load_gisette),
        ("RCV1", cp.datasets.load_rcv1),
        ("Madelon", cp.datasets.load_madelon),
        ("Covtype", cp.datasets.load_covtype)
        ]


    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 5))
    for ax, (dataset_title, load_data) in zip(axes.ravel(), datasets):
      print("Running on the %s dataset" % dataset_title)

      X, y = load_data()
      n_samples, n_features = X.shape

      l1_ball = cp.utils.L1Ball(n_features / 2.)
      f = cp.utils.LogLoss(X, y)
      x0 = np.zeros(n_features)

      for step_size, label in [
          ["adaptive", "adaptive step-size"],
          ["adaptive2", "adaptive2 step-size"],
          ["adaptive3", "adaptive3 step-size"],
          [None, "Lipschitz step-size"]
          ]:
        print("Running %s variant" % label)
        cb = cp.utils.Trace(f)
        trace_gt = []

        def trace(kw):
          # store the Frank-Wolfe gap g_t
          trace_gt.append(kw["g_t"])

        cp.minimize_frank_wolfe(
            f.f_grad,
            x0,
            l1_ball.lmo,
            callback=trace,
            max_iter=50,
            step_size=step_size,
            verbose=True,
            lipschitz=f.lipschitz,
        )
        # ax.plot(trace_gt, label=label)
        ax.plot(trace_gt, label=label)
        ax.set_yscale("log")
        ax.legend()
      ax.set_xlabel("number of iterations")
      ax.set_ylabel("FW gap")
      ax.set_title(dataset_title)
      fig.tight_layout()  # otherwise the right y-label is slightly clipped
      ax.grid()
    # plt.legend()
    plt.show()

**Total running time of the script:** ( 2 minutes  50.806 seconds)


.. _sphx_glr_download_auto_examples_plot_fw_stepsize.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_fw_stepsize.py <plot_fw_stepsize.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_fw_stepsize.ipynb <plot_fw_stepsize.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
